import random
import time
import copy
import numpy as np
from readData import ReadData
start_time = time.time()










def  run(size,dis_mat):

    """
    :param path_index - temporary path
    :param best_path - the best path from NN algorithm
    :param changed_path - copy of dis_mat with changed values
    :param distance - distance
    :param starting_numbers - list of a 10 random starting points
    :return: algorithm chooses the best available path which can be generated by NN algorithm for k-chances(10)
    """
    starting_numbers = []
    best_distance = 99999999
    for _ in range(0,10):
        x = random.randint(0,size-1)
        if x not in starting_numbers:
            starting_numbers.append(x)
    for start in starting_numbers:

        start_point = start
        path_index = [start_point]
        changed_path = copy.copy(dis_mat)
        for i in range(size):
            changed_path[i][i] = 999999999

        path_index.append( np.argmin(changed_path[start_point]))
        for i in range(size):
            changed_path[i][start_point] = 999999999

        distance = dis_mat[start_point][path_index[1]]
        i=2

        while i != size:
            last_element = path_index[-1]
            # zmiana ostatnio użytego elementu na maksymalny, żeby nie został użyty
            for j in changed_path:
                j[last_element] = 999999999

            path_index.append(np.argmin(changed_path[last_element]))
            distance += dis_mat[last_element][path_index[-1]]
            i += 1

        distance += dis_mat[path_index[0]][path_index[-1]]

        if distance < best_distance:
            best_distance = distance
            best_path = path_index
    path = [1 + x for x in best_path]
    return path


